# load data

import csv
from google.cloud import bigtable
from google.cloud.bigtable import column_family

csv_file = 'data.csv'
client = bigtable.Client(project='homework2-cs498', admin=True)
instance = client.instance('ev-bigtable')
table = instance.table('ev-population')
if not table.exists():
    table.create(column_families={'ev_info': column_family.MaxAgeGCRule(days=30)})
def utf_fix(value):
    if value is None:
        return ""
    return str(value).encode('utf-8')
try:
    with open(csv_file, 'r', encoding='utf-8-sig') as f:
        reader = csv.DictReader(f)    
        rows = []
        good_cnt = 0
        bad_cnt = 0
        for row in reader:
            try:
                row_key = utf_fix(row['DOL Vehicle ID'])
                direct_row = table.direct_row(row_key)
                direct_row.set_cell('ev_info', b'make', utf_fix(row['Make']))
                direct_row.set_cell('ev_info', b'model', utf_fix(row['Model']))
                direct_row.set_cell('ev_info', b'model_year', utf_fix(row['Model Year']))
                direct_row.set_cell('ev_info', b'electric_range', utf_fix(row['Electric Range']))
                direct_row.set_cell('ev_info', b'city', utf_fix(row['City']))
                direct_row.set_cell('ev_info', b'county', utf_fix(row['County']))
                rows.append(direct_row)
                good_cnt += 1
                if len(rows) >= 1000:
                    table.mutate_rows(rows)
                    rows = []
                    print(f"passed thru {good_cnt} rows...")
            except Exception as e:
                bad_cnt += 1
                print(f"row {good_cnt + bad_cnt} broke: {str(e)}") #Tell me where
                continue
        if rows:
            table.mutate_rows(rows)
        
        print(f"\ndonzeo")
        print(f"Successfully processed: {good_cnt} rows")
        print(f"Rows skipped: {bad_cnt}")
except Exception as e:
    print(f"bad stuff: {str(e)}")


#flask

from flask import Flask
from google.cloud import bigtable
from google.cloud.bigtable import row_filters

app = Flask(__name__)
client = bigtable.Client(project='homework2-cs498')
instance = client.instance('ev-bigtable')
table = instance.table('ev-population')

@app.route('/rows')
def rows():
    count = 0
    for i in table.read_rows():
        count +=1
    return str(count)

@app.route('/Best-BMW')
def bmw():
    count = 0
    for row in table.read_rows():
        make = row.cells['ev_info'].get(b'make')[0].value.decode()
        range_val = row.cells['ev_info'].get(b'electric_range')[0].value.decode()
        if make == 'BMW' and int(range_val) > 100:
            count += 1
    return str(count)

@app.route('/tesla-owners')
def tesla():
    count = 0
    for row in table.read_rows():
        try:
            make_cells = row.cells['ev_info'].get(b'make')
            city_cells = row.cells['ev_info'].get(b'city')
            
            if make_cells and city_cells:
                make = make_cells[0].value.decode('utf-8')
                city = city_cells[0].value.decode('utf-8')
                if str(make.lower()) == 'tesla' and str(city.lower()) == 'seattle':
                    count += 1
        except Exception as e:
            print("bad")
            continue
    return str(count)

@app.route('/update', methods=['POST', 'GET'])
def update_range():
    row_key = '257246118'.encode()
    row = table.direct_row(row_key)
    row.set_cell('ev_info', b'electric range', b'200')
    row.commit()
    return str("Success")

@app.route('/delete', methods=['DELETE', 'GET'])
def delete():
    count = 0
    for i in table.read_rows():
        count +=1
    del_cnt = 0
    del_rows = []
    for row in table.read_rows():
        try:
            yr = row.cells['ev_info'].get(b'model year')
            if yr:
                yr_str = yr[0].value.decode('utf-8')
                if yr_str.isdigit() and int(yr_str) < 2014:
                    del_rows.append(row.row_key)
                    del_cnt +=1
        except Exception as e:
            print("bad")
            continue
    return str(count - del_cnt)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)